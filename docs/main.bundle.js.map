{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://webpack-odin-boilerplate/./src/styles.css","webpack://webpack-odin-boilerplate/./node_modules/css-loader/dist/runtime/api.js","webpack://webpack-odin-boilerplate/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://webpack-odin-boilerplate/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://webpack-odin-boilerplate/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://webpack-odin-boilerplate/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://webpack-odin-boilerplate/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://webpack-odin-boilerplate/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://webpack-odin-boilerplate/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://webpack-odin-boilerplate/webpack/bootstrap","webpack://webpack-odin-boilerplate/webpack/runtime/compat get default export","webpack://webpack-odin-boilerplate/webpack/runtime/define property getters","webpack://webpack-odin-boilerplate/webpack/runtime/hasOwnProperty shorthand","webpack://webpack-odin-boilerplate/webpack/runtime/nonce","webpack://webpack-odin-boilerplate/./src/styles.css?44b2","webpack://webpack-odin-boilerplate/./src/logger.js","webpack://webpack-odin-boilerplate/./src/linkedList.js","webpack://webpack-odin-boilerplate/./src/main.js","webpack://webpack-odin-boilerplate/./src/index.js"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/* CSS RESET: use box-sizing model; remove default margin & form typography\nstyles; set buttons to display block; set base (pre UA stylesheet) font size; */\n*, *::before, *::after { box-sizing: border-box; }\n* { margin: 0; }\ninput, button, textarea, select { font: inherit; }\nbutton { display: block; cursor: pointer; }\n:root{ font-size: 16px; }  /*chrome default*/\n/* imported google fonts examples */\n/* .roboto { font-family: \"Roboto\"; font-weight: 400,500; font-style: normal; } */\n/* variables---------------------------------------------------------------- */\n:root{\n  --grey1: hsl(214 27% 82%);\n  --grey2: hsl(214 0% 70%);\n\n  --black: hsl(0, 0%, 0%);\n  --white: hsl(0, 0%, 100%);\n  --transparent: hsl(0, 0%, 0%, 0); /*for gradients*/\n  \n  /* modded tailwind sky palette */\n  --bg950: hsl(204, 80%, 8%);\n  --bg900: hsl(204, 80%, 15%);\n  --bg800: hsl(202, 90%, 23%);\n  --bg700: hsl(201, 90%, 33%);\n  --bg600: hsl(201, 98%, 40%);\n  --mg500: hsl(200, 98%, 52%);\n  --fg400: hsl(200, 98%, 66%);\n  --fg300: hsl(199, 98%, 74%);\n  --fg200: hsl(199, 98%, 82%);\n  --fg100: hsl(199, 96%, 88%);\n  --fg50: hsl(204, 94%, 96%); /* or use white var */\n\n  /*boat,hit,miss colors*/\n  --patrolBoatColor:hsl(181, 100%, 34%); \n  --destroyerColor: hsl(181, 100%, 28%);\n  --submarineColor: hsl(181, 100%, 22%);\n  --battleshipColor:hsl(181, 100%, 17%);\n  --carrierColor:   hsl(181, 100%, 13%);\n  --hitColor: hsl(0, 85%, 44%);\n  --missColor: hsl(38, 90%, 67%);\n  --boatShadow: 0 0 0.3rem 0rem var(--bg950) inset;\n}\n\n/* main CSS */\nbody{\n  font-family: 'Roboto', Arial, Helvetica, sans-serif;\n  font-weight: 400;\n  max-width: 56.25rem;\n  margin: 0 auto;\n  background-color: var(--bg800);\n  color: var(--white);\n  /*below hides long vertical ship overlay going past screen, but causes scroll issue*/\n  /* overflow-y: hidden; */\n\n  h1 {\n    font-size: 1.5rem;\n    text-align: center;\n    margin-top: 0.25rem;\n    background-color: var(--bg900);\n    text-shadow: 0 0 0.7rem var(--black);\n    padding: 0.2rem 0 0.1rem 0;\n    border-radius: 0.5rem;\n  }\n\n  span {\n    color: var(--bg950);\n  }\n\n}\n\n#passDeviceDiv {\n  display: none;\n  background-color: var(--fg200);\n  padding: 1rem;\n\n  #continueBtn {\n    color: var(--white);\n    font-size: 1rem;\n    background-color: var(--bg600);\n    padding: 0.5rem 1rem;\n    margin: 0.5rem auto;\n    border: 3px outset var(--bg700);\n    border-radius: 1.5rem;\n    box-shadow: 0 0 2px 1px var(--bg900);\n  }\n}\n\n#boardsAndLabelsDiv {\n  margin: 0.25rem auto;\n  background-color: var(--fg200);\n  display: flex;\n  flex-wrap: wrap;\n\n  span {\n    flex-basis: 50%;\n    text-align: center;\n    text-shadow: 0 0 1px var(--bg600);\n    margin-top: 0.2rem;\n  }\n\n  .hideMe {\n    display: none;\n  }\n\n  #playerBoardsWrap {\n    flex-basis: 100%;\n    display: flex;\n    gap: 0.4rem;\n    margin: 0.15rem 0.3rem;\n\n    .receivingBoardDiv,\n    .attackingBoardDiv {\n      display: grid;\n      grid-template: repeat(10, 1fr) / repeat(10, 1fr);\n      width: 50%;\n      border: 2px solid var(--mg500);\n      box-shadow: 0 0 3px 0px var(--black);\n      background: repeating-linear-gradient(\n        to bottom,\n        #0ba4d2 0%, \n        #17b1e4 6.25%,\n        #55c3e5 12.5%,\n        #17b1e4 18.5%,\n        #0ba4d2 25%\n      );\n    }\n    .receivingBoardDiv {\n      [data-cell-data=\"Patrol Boat\"] {\n        background-color: var(--patrolBoatColor);\n        box-shadow: var(--boatShadow);\n      }\n      [data-cell-data=\"Destroyer\"] {\n        background-color: var(--destroyerColor);\n        box-shadow: var(--boatShadow);\n      }\n      [data-cell-data=\"Submarine\"] {\n        background-color: var(--submarineColor);\n        box-shadow: var(--boatShadow);\n      }\n      [data-cell-data=\"Battleship\"] {\n        background-color: var(--battleshipColor);\n        box-shadow: var(--boatShadow);\n      }\n      [data-cell-data=\"Carrier\"] {\n        background-color: var(--carrierColor);\n        box-shadow: var(--boatShadow);\n      }\n    }\n    \n    [data-cell-data=\"hit\"] {\n      background-color: var(--hitColor);\n    }\n    [data-cell-data=\"miss\"] {\n      background-color: var(--missColor);\n    }\n\n    .cellDiv {\n      border: 0.5px solid var(--black);\n      aspect-ratio: 1/1; /*match \"auto\" width or height to aspect ratio*/\n    }\n  }\n}\n\n.shipOverlayDiv {\n  background-color: var(--bg950);\n  opacity: 0.7;\n  display: block;\n  position: absolute;\n  pointer-events: none; /* pass through click events */\n}\n\n#msgDiv {\n  font-size: 1.2rem;\n  text-shadow: 0 0 0.7rem var(--black);\n  margin: 0.5rem auto 0.25rem;\n  text-align: center;\n}\n\n.setupControlsWrap {\n  display: flex;\n  justify-content: center;\n  max-width: 35rem;\n  margin: 0 auto;\n  gap: 0.25rem;\n\n  .btnsWrap {\n    flex-basis: 50%;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    text-align: center;\n    background-color: var(--fg50);\n    gap: 0.25rem;\n    padding: 0.25rem 0 0.25rem;\n    border-radius: 0.5rem;\n\n    span {\n      text-shadow: 0 0 1px var(--fg400);\n      flex-basis: 60%;\n      font-size: 1rem;\n    }\n\n    button {\n      flex-basis: 48%;\n      background-color: var(--bg600);\n      color: var(--white);\n      border: 3px outset var(--bg700);\n      border-radius: 1.5rem;\n      box-shadow: 0 0 2px 1px var(--bg900);\n    }\n    button:hover {\n      background-color: var(--fg200);\n    }\n    button[disabled] {\n      background-color: var(--grey2);\n      cursor: default;\n      border-color: var(--grey2);\n    }\n  }\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/styles.css\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/* CSS RESET: use box-sizing model; remove default margin & form typography\\nstyles; set buttons to display block; set base (pre UA stylesheet) font size; */\\n*, *::before, *::after { box-sizing: border-box; }\\n* { margin: 0; }\\ninput, button, textarea, select { font: inherit; }\\nbutton { display: block; cursor: pointer; }\\n:root{ font-size: 16px; }  /*chrome default*/\\n/* imported google fonts examples */\\n/* .roboto { font-family: \\\"Roboto\\\"; font-weight: 400,500; font-style: normal; } */\\n/* variables---------------------------------------------------------------- */\\n:root{\\n  --grey1: hsl(214 27% 82%);\\n  --grey2: hsl(214 0% 70%);\\n\\n  --black: hsl(0, 0%, 0%);\\n  --white: hsl(0, 0%, 100%);\\n  --transparent: hsl(0, 0%, 0%, 0); /*for gradients*/\\n  \\n  /* modded tailwind sky palette */\\n  --bg950: hsl(204, 80%, 8%);\\n  --bg900: hsl(204, 80%, 15%);\\n  --bg800: hsl(202, 90%, 23%);\\n  --bg700: hsl(201, 90%, 33%);\\n  --bg600: hsl(201, 98%, 40%);\\n  --mg500: hsl(200, 98%, 52%);\\n  --fg400: hsl(200, 98%, 66%);\\n  --fg300: hsl(199, 98%, 74%);\\n  --fg200: hsl(199, 98%, 82%);\\n  --fg100: hsl(199, 96%, 88%);\\n  --fg50: hsl(204, 94%, 96%); /* or use white var */\\n\\n  /*boat,hit,miss colors*/\\n  --patrolBoatColor:hsl(181, 100%, 34%); \\n  --destroyerColor: hsl(181, 100%, 28%);\\n  --submarineColor: hsl(181, 100%, 22%);\\n  --battleshipColor:hsl(181, 100%, 17%);\\n  --carrierColor:   hsl(181, 100%, 13%);\\n  --hitColor: hsl(0, 85%, 44%);\\n  --missColor: hsl(38, 90%, 67%);\\n  --boatShadow: 0 0 0.3rem 0rem var(--bg950) inset;\\n}\\n\\n/* main CSS */\\nbody{\\n  font-family: 'Roboto', Arial, Helvetica, sans-serif;\\n  font-weight: 400;\\n  max-width: 56.25rem;\\n  margin: 0 auto;\\n  background-color: var(--bg800);\\n  color: var(--white);\\n  /*below hides long vertical ship overlay going past screen, but causes scroll issue*/\\n  /* overflow-y: hidden; */\\n\\n  h1 {\\n    font-size: 1.5rem;\\n    text-align: center;\\n    margin-top: 0.25rem;\\n    background-color: var(--bg900);\\n    text-shadow: 0 0 0.7rem var(--black);\\n    padding: 0.2rem 0 0.1rem 0;\\n    border-radius: 0.5rem;\\n  }\\n\\n  span {\\n    color: var(--bg950);\\n  }\\n\\n}\\n\\n#passDeviceDiv {\\n  display: none;\\n  background-color: var(--fg200);\\n  padding: 1rem;\\n\\n  #continueBtn {\\n    color: var(--white);\\n    font-size: 1rem;\\n    background-color: var(--bg600);\\n    padding: 0.5rem 1rem;\\n    margin: 0.5rem auto;\\n    border: 3px outset var(--bg700);\\n    border-radius: 1.5rem;\\n    box-shadow: 0 0 2px 1px var(--bg900);\\n  }\\n}\\n\\n#boardsAndLabelsDiv {\\n  margin: 0.25rem auto;\\n  background-color: var(--fg200);\\n  display: flex;\\n  flex-wrap: wrap;\\n\\n  span {\\n    flex-basis: 50%;\\n    text-align: center;\\n    text-shadow: 0 0 1px var(--bg600);\\n    margin-top: 0.2rem;\\n  }\\n\\n  .hideMe {\\n    display: none;\\n  }\\n\\n  #playerBoardsWrap {\\n    flex-basis: 100%;\\n    display: flex;\\n    gap: 0.4rem;\\n    margin: 0.15rem 0.3rem;\\n\\n    .receivingBoardDiv,\\n    .attackingBoardDiv {\\n      display: grid;\\n      grid-template: repeat(10, 1fr) / repeat(10, 1fr);\\n      width: 50%;\\n      border: 2px solid var(--mg500);\\n      box-shadow: 0 0 3px 0px var(--black);\\n      background: repeating-linear-gradient(\\n        to bottom,\\n        #0ba4d2 0%, \\n        #17b1e4 6.25%,\\n        #55c3e5 12.5%,\\n        #17b1e4 18.5%,\\n        #0ba4d2 25%\\n      );\\n    }\\n    .receivingBoardDiv {\\n      [data-cell-data=\\\"Patrol Boat\\\"] {\\n        background-color: var(--patrolBoatColor);\\n        box-shadow: var(--boatShadow);\\n      }\\n      [data-cell-data=\\\"Destroyer\\\"] {\\n        background-color: var(--destroyerColor);\\n        box-shadow: var(--boatShadow);\\n      }\\n      [data-cell-data=\\\"Submarine\\\"] {\\n        background-color: var(--submarineColor);\\n        box-shadow: var(--boatShadow);\\n      }\\n      [data-cell-data=\\\"Battleship\\\"] {\\n        background-color: var(--battleshipColor);\\n        box-shadow: var(--boatShadow);\\n      }\\n      [data-cell-data=\\\"Carrier\\\"] {\\n        background-color: var(--carrierColor);\\n        box-shadow: var(--boatShadow);\\n      }\\n    }\\n    \\n    [data-cell-data=\\\"hit\\\"] {\\n      background-color: var(--hitColor);\\n    }\\n    [data-cell-data=\\\"miss\\\"] {\\n      background-color: var(--missColor);\\n    }\\n\\n    .cellDiv {\\n      border: 0.5px solid var(--black);\\n      aspect-ratio: 1/1; /*match \\\"auto\\\" width or height to aspect ratio*/\\n    }\\n  }\\n}\\n\\n.shipOverlayDiv {\\n  background-color: var(--bg950);\\n  opacity: 0.7;\\n  display: block;\\n  position: absolute;\\n  pointer-events: none; /* pass through click events */\\n}\\n\\n#msgDiv {\\n  font-size: 1.2rem;\\n  text-shadow: 0 0 0.7rem var(--black);\\n  margin: 0.5rem auto 0.25rem;\\n  text-align: center;\\n}\\n\\n.setupControlsWrap {\\n  display: flex;\\n  justify-content: center;\\n  max-width: 35rem;\\n  margin: 0 auto;\\n  gap: 0.25rem;\\n\\n  .btnsWrap {\\n    flex-basis: 50%;\\n    display: flex;\\n    flex-wrap: wrap;\\n    justify-content: center;\\n    text-align: center;\\n    background-color: var(--fg50);\\n    gap: 0.25rem;\\n    padding: 0.25rem 0 0.25rem;\\n    border-radius: 0.5rem;\\n\\n    span {\\n      text-shadow: 0 0 1px var(--fg400);\\n      flex-basis: 60%;\\n      font-size: 1rem;\\n    }\\n\\n    button {\\n      flex-basis: 48%;\\n      background-color: var(--bg600);\\n      color: var(--white);\\n      border: 3px outset var(--bg700);\\n      border-radius: 1.5rem;\\n      box-shadow: 0 0 2px 1px var(--bg900);\\n    }\\n    button:hover {\\n      background-color: var(--fg200);\\n    }\\n    button[disabled] {\\n      background-color: var(--grey2);\\n      cursor: default;\\n      border-color: var(--grey2);\\n    }\\n  }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nc = undefined;","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./styles.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./styles.css\";\n       export default content && content.locals ? content.locals : undefined;\n","export const logToConsole = (data)=> console.log(data);\nexport const tableToConsole = (data)=> console.table(data);\nexport const objectToString = (data)=> JSON.stringify( data, null, '   ' );\nexport const log2DStringArray = (arr) => console.log(\n  arr.reduce((result, subArr)=> `${result}${subArr.join(', ')}\\n`, '')\n);\nexport const logSetValues = (set)=> console.log( [...set] );\n","/* Next task\n-optimize by keeping a reference to the second last node in addition to the tail, called penultimate. AND!!!! check every single other function will correctly set it after implementing the optimization\n*/\n\nimport { logToConsole as lg } from './logger.js'; //shorthand loggers\n\n//node creation fn\nconst makeNode = (value = null, next = null)=> ( { value, next } );\n//linked list creation fn\nconst makeLinkedList = (head = null, tail = null)=> {\n  let currentSize = 0; //cache the size to not always recalculate\n  //management fns\n  //fn to add node to end of list\n  const append = (value)=> {\n    //handle empty list\n    if ( !head ) {\n      head = makeNode(value);\n      tail = head;\n    } else { //handle non-empty list\n      //create new node at tail\n      tail.next = makeNode(value);\n      tail = tail.next; //set new tail\n    }\n    currentSize++;\n  };\n\n  //fn to add node at beginning of list\n  const prepend = (value)=> {\n    //handle empty list\n    if ( !head ) {\n      head = makeNode(value);\n      tail = head;\n    } else { //make, set new head node\n      const newHead = makeNode(value);\n      newHead.next = head;\n      head = newHead;\n    }\n    currentSize++;\n  };\n\n  //OLD PRE MEMOIZATION CODE: fn to return amount of nodes in list.\n  // const getSize = ()=> {\n  //   let size = 0;\n  //   let currentNode = head;\n  //   while ( currentNode ) { //loop based on existence of next node\n  //     size++;\n  //     currentNode = currentNode.next;\n  //   }\n  //   return size;\n  // };\n\n  //NEW MEMOIZATION CODE: fn to return amount of nodes in list.\n  const getSize = ()=> currentSize;\n\n  //fn to get node from an index. optionally provide boolean for skipValidation for internal invocations\n  const at = (index, skipValidation)=> {\n    let currentNode = head;\n    if (!skipValidation) {\n      if ( index < 0 || index >= getSize() ) {\n        throw new Error('Index outside list bounds [list is zero-indexed]');\n      }\n    }\n    for ( let currentIndex = 0; currentIndex <= index; currentIndex++ ) {\n      if ( currentIndex === index) return currentNode;\n      currentNode = currentNode.next; //move to next node\n    }\n  };\n\n  //fn to remove tail node of list\n  const pop = ()=> {\n    //handle empty list\n    if ( getSize() === 0 ) {\n      lg( 'list empty, nothing to remove' );\n      return;\n    }\n    //handle popping of last node\n    if ( getSize() === 1 ) {\n      [head, tail] = [null, null];\n      currentSize--;\n      return;\n    }\n    //since this is not a doubly-linked list, we need to traverse the list to the end\n    let currentNode = head;\n    while ( currentNode.next ) {\n      tail = currentNode; //before changing currentNode, set tail to point to previous node\n      currentNode = currentNode.next; //move to next node\n    }\n    //once tail is set correctly, pop last node.\n    tail.next = null;\n    currentSize--;\n  };\n\n  /*\n\n  //fn to check if a value is in the list, not needed, just check if findIndex returns an index\n  const contains = (value)=> {\n    //traverse and compare\n    let currentNode = head;\n    while ( currentNode ) {\n      if ( currentNode.value === value ) return true;\n      currentNode = currentNode.next; //move to next node\n    }\n    return false;//when value not in list\n  };\n\n  */\n\n  // given a value, get the index of the node if value exists in list. use instead of\n  //contains method above, since null returned when no node with value found in list\n  const findIndex = (value)=> {\n    //travese, compare, save index\n    let index = 0;\n    let currentNode = head;\n    while ( currentNode ) {\n      if ( currentNode.value === value ) return index;\n      index++;\n      currentNode = currentNode.next; //move to next node\n    }\n    return null; //handle value not found\n  };\n\n  // insert a new node at insertion index\n  const insertAt = (value, insertIndex)=> {\n    lg( `value to insert: ${value}` );\n    // throw error if the list does not have the indexed space created, like\n    // trying to insert to 0 on an empty list, or to an index past the last index.\n    if ( insertIndex < 0 || insertIndex >= getSize() ) {\n      throw new Error(`Insertion Index not in list bounds. (List empty: ${\n        getSize() === 0 ? 'true' : 'false'\n      })`);\n    }\n    // handle node insertions at head\n    if ( insertIndex === 0 ) {\n      prepend(value);\n      return;\n    }\n    //handle insertion at index within list after head\n    const previousNode = at(insertIndex - 1, true);//skips validation in at()\n    const nextNode = previousNode.next.next;\n    //create new node with value and the nextNode\n    previousNode.next = makeNode(value, nextNode);\n    currentSize++;\n  };\n\n  // remove node at index, return it's value\n  const removeAt = (removalIndex)=> {\n    // lg( `index of node to remove: ${removalIndex}` );\n    // throw error if the list does not have the indexed space created, like\n    // trying to remove 0 on an empty list, or to an index past the last index.\n    if ( removalIndex < 0 || removalIndex >= getSize() ) {\n      throw new Error(`Removal Index not in list bounds. (List empty: ${\n        getSize() === 0 ? 'true' : 'false'\n      })`);\n    }\n    let returnVal;\n    // handle node removal at head\n    if ( removalIndex === 0 ) {\n      returnVal = head.value;\n      head = head.next;\n      currentSize--;\n      return returnVal;\n    }\n    //handle removal at index within list after head\n    const previousNode = at(removalIndex - 1, true); //skips validation in at()\n    returnVal = previousNode.next.value;\n    const nextNode = previousNode.next.next;\n    //connect nodes together\n    previousNode.next = nextNode;\n    currentSize--;\n    return returnVal;\n  };\n\n  const toString = ()=> {\n    //handle empty list\n    if ( getSize() === 0 ) {\n      return 'linked list is empty';\n    }\n    let result = '';\n    let currentNode = head;\n    //traverse, concat\n    while ( currentNode ) {\n      result += `( ${currentNode.value} ) -> `;\n      currentNode = currentNode.next; //move to next node\n    }\n    result += 'null';\n    return result;\n  };\n\n  return {\n    append,\n    prepend,\n    getHead: ()=> head,\n    getTail: ()=> tail,\n    getSize,\n    at,\n    pop,\n    // contains, //use findIndex\n    findIndex,\n    toString,\n    insertAt,\n    removeAt,\n  };\n};\nexport default makeLinkedList;\n//testing\n// const linkedList1 = makeLinkedList();\n// linkedList1.append( 'banana' );\n// linkedList1.append( 'pear' );\n// lg( JSON.stringify( linkedList1.getHead(), null, '\\t' ) ); //wow!!!\n// lg( `nodes in linked list: ${ linkedList1.getSize() }` );\n// lg( `tail of linked list: ${ JSON.stringify( linkedList1.getTail(), null, '\\t' ) }` );\n// lg( `node at index 1 of linked list: ${ JSON.stringify( linkedList1.at(1), null, '\\t' ) }` );\n// lg( `index of 'cherry' in list: ${ linkedList1.findIndex('cherry') }` );\n// linkedList1.insertAt('apple', 0);\n// lg( linkedList1.removeAt(0) );\n// lg( linkedList1.toString() );\n","/* Next task:\n\n*/\n\n// JS imports\n//include file extension For Node.js when importing local modules:\nimport { logToConsole as lg, objectToString as ots, logSetValues as lsv } from './logger.js';\nimport makeLinkedList from './linkedList.js';\n\n//jest testing for this file is in main.test.js and done with ES Module exports\n\n//fn to make ship objects\nexport const makeShip = ( shipName )=> {\n  let length; let hits = 0; let isSunk = false;\n  //assign ship length from name\n  switch (shipName) {\n    case 'Carrier':\n      length = 5;\n      break;\n    case 'Battleship':\n      length = 4;\n      break;\n    case 'Destroyer':\n      length = 3;\n      break;\n    case 'Submarine':\n      length = 3;\n      break;\n    case 'Patrol Boat':\n      length = 2;\n  }\n\n  const hitShip = ()=> {\n    if ( hits < length ) hits += 1; // increase hits\n    if ( hits === length ) isSunk = true; // check to sink\n  };\n\n  return {\n    getLength: ()=> length,\n    getHits: ()=> hits,\n    isSunk: ()=> isSunk, // bool of sink state\n    hitShip, // call when hit\n    shipName\n  };\n};\n\n//private makeGameboard fn to place a ship on board and return a ship obj. The board\n//marking part of placing a ship is done in this fn by editing the playGrid array.\n//errors thrown for invalid placement arguments\nconst _placeAndGetShip = ( startCoords, direction, shipName, playGrid )=> {\n  const ship = makeShip(shipName);\n  const markEnd = ship.getLength();\n  const possibleMarkCoords = [];\n\n  //fn to check if cell is in bounds of 10 x 10 2D playGrid arr and free.\n  const isValid = (row, col)=> {\n    if ( row > -1 && row < 10 && col > -1 && col < 10 ) {\n      //check if cell is occupied\n      if ( playGrid[row][col] === null ) return true;\n      throw new Error(`cell ${row},${col} occupied`); //when cell has a ship\n      //*throw statement immediately ends fn execution. control then passed to first\n      //catch block in the call stack. program terminates if no catch block exists\n      //among caller functions.\n    }\n    throw new Error(`cell ${row},${col} out of bounds`); //when cell out of bounds\n  };\n\n  //place ship on board by checking if all cells valid to mark with ship name.\n  //consider direction and gather possible marks from start in an array\n  let newRow;\n  let newCol;\n  for (let markCount = 0; markCount < markEnd; markCount++) {\n    switch (direction) {\n      case 'up': //upwards marking\n        [newRow, newCol] = [startCoords[0] - markCount, startCoords[1]]; //destructuring reassign\n        if ( isValid( newRow, newCol ) ) possibleMarkCoords.push( [newRow, newCol] );\n        break;\n      case 'right': //rightwards marking\n        [newRow, newCol] = [startCoords[0], startCoords[1] + markCount];\n        if ( isValid( newRow, newCol ) ) possibleMarkCoords.push( [newRow, newCol] );\n        break;\n      case 'down': //downwards marking\n        [newRow, newCol] = [startCoords[0] + markCount, startCoords[1]];\n        if ( isValid( newRow, newCol ) ) possibleMarkCoords.push( [newRow, newCol] );\n        break;\n      case 'left': //leftwards marking\n        [newRow, newCol] = [startCoords[0], startCoords[1] - markCount];\n        if ( isValid( newRow, newCol ) ) possibleMarkCoords.push( [newRow, newCol] );\n    }\n  }\n  //mark board when total possible marks match ship length (i.e. only valid marks made)\n  if ( possibleMarkCoords.length === ship.getLength() ) {\n    possibleMarkCoords.forEach( (markCoords)=> {\n      playGrid[markCoords[0]][markCoords[1]] = shipName;\n    } );\n  }\n  //return ship to caller for saving\n  return ship;\n};\n\n//fn to make gameboard objects.\nexport const makeGameboard = ()=> {\n  //start with 10 x 10 2D playGrid array of null elements, representing board cells.\n  //Cells can change to hold data strings of the cell state: hit/miss/shipName.\n  //Top left board cell coordinates are 0,0. Each 2nd dimension array maps to a board\n  //row, top to bottom. Each element of 2nd dimension arrays maps to a board column,\n  //from left to right.\n  let playGrid = [...Array(10)].map( ()=> Array(10).fill(null) );\n  //store made ships in this js Map for quick access:\n  let shipsMap = new Map();\n\n  //this fn calls private _placeAndGetShip with playGrid reference and expects ship obj back\n  //errors on invalid placement arguments, can use try-catch blocks\n  const placeShip = (startCoords, direction, shipName,)=> { //types: arr,str,str\n    //place ship by marking board in _placeAndGetShip, then set returned ship in shipsMap\n    shipsMap.set( shipName, _placeAndGetShip(startCoords, direction, shipName, playGrid) );\n  };\n\n  //fn to populate board with the ships in random positions\n  const placeShipsRandomly = ()=> {\n    //clear grid, shipsMap. no iteration for better time complexity\n    playGrid = [...Array(10)].map( ()=> Array(10).fill(null) );\n    shipsMap = new Map();\n    //make array of ship names from largest to smallest\n    const shipsToPlace = ['Carrier', 'Battleship', 'Submarine', 'Destroyer', 'Patrol Boat'];\n    const shipSizes = [5, 4, 3, 3, 2]; //use this with loop to fill in set\n    const markedCoords = new Set();\n    const coordsToTry = makeLinkedList(); //pick random coords arr from this shrinking list\n    playGrid.forEach( (rowArr, row)=> { //fill list with coord arrays\n      rowArr.forEach( (data, col)=> coordsToTry.append([row, col]) );\n    } );\n    //recursive fn to place all ships. randomized greedy algo w/ small inifinite loop chance\n    const placeShips = (shipIndex)=> {\n      //base case: done placing when shipIndex matches length of shipsToPlace\n      if (shipIndex === shipsToPlace.length) return;\n      //pick random aim/direction and coordinate from linked list\n      let aim = Math.random() < 0.5 ? 'right' : 'down';\n      const currentCoord = coordsToTry\n        .removeAt( Math.floor( Math.random() * coordsToTry.getSize() ) );\n      //abandon coordinate if in markedCoords set\n      if ( markedCoords.has(currentCoord.join(',')) ) {\n        // lg(`${currentCoord} occupied, trying again`);\n        placeShips(shipIndex);\n      } else {\n        try { //place ship with random available coordinate\n          placeShip( currentCoord, aim, shipsToPlace[shipIndex] );\n          //keep track of cells marked in playGrid past origin in a set to check.\n          //removal from linked list is expensive.\n          for (let i = 1; i < shipSizes[shipIndex]; i++) {\n            if (aim === 'right') { //track right from placement origin\n              markedCoords.add(`${currentCoord[0]},${currentCoord[1] + i}`);\n            } else { //track down from placement origin\n              markedCoords.add(`${currentCoord[0] + i},${currentCoord[1]}`);\n            }\n          }\n          placeShips(++shipIndex);//place next ship recursively\n        } catch (err) { //try again with modded placement args if ship placement failed.\n          //remember isValid in _placeAndGetShip checks all cells to throw errors\n          //try new coordinate if origin throws occupied error\n          if ( +err.message[5] === currentCoord[0]\n            && +err.message[7] === currentCoord[1] ) {\n            // lg('origin coordinate occupied. will try new one');\n            placeShips(shipIndex);\n          } else { //try placing in opposite aim\n            // lg(`found ${err.message} during ${shipsToPlace[shipIndex] } placement. will try opposite aim`);\n            try { //try opposite aim before abandoning origin coordinate\n              aim = aim === 'right' ? 'left' : 'up';\n              placeShip( currentCoord, aim, shipsToPlace[shipIndex] );\n              for (let i = 1; i < shipSizes[shipIndex]; i++) { //track cells past origin\n                if (aim === 'left') { //track left from placement origin\n                  markedCoords.add(`${currentCoord[0]},${currentCoord[1] - i}`);\n                } else { //track up from placement origin\n                  markedCoords.add(`${currentCoord[0] - i},${currentCoord[1]}`);\n                }\n              }\n              placeShips(++shipIndex);//place next ship recursively\n            } catch (err) { //2 omnidirectional tries from origin done, abandon for now\n              // lg(`found ${err.message} during ${shipsToPlace[shipIndex] } placement. will try new coordinate`);\n              coordsToTry.append(currentCoord);//return unused coord to linked list\n              placeShips(shipIndex);\n            }\n          }\n        }\n      }\n    };\n    //start placing all ships recursively\n    placeShips(0);\n    // lsv(markedCoords); //view set...\n  };\n\n  //fn to handle attack from coordinates. must call hit on ships, or record missed shot.\n  //returns the new mark for UI update logic\n  const receiveAttack = ( attackCoords )=> {\n    const row = attackCoords[0];\n    const col = attackCoords[1];\n    //check in bounds cells\n    //* _placeAndGetShip isValid fn has Error throwing based logic, extracting it can wait.\n    if ( row > -1 && row < 10 && col > -1 && col < 10 ) {\n      switch (playGrid[row][col]) {\n        //if attacked cell data is null, mark with miss\n        case null:\n          playGrid[row][col] = 'miss';\n          return 'miss';\n        //call ship's hitShip(), then update mark\n        case 'Patrol Boat':\n        case 'Destroyer':\n        case 'Submarine':\n        case 'Battleship':\n        case 'Carrier':\n          shipsMap.get(playGrid[row][col]).hitShip();\n          playGrid[row][col] = 'hit';\n          return 'hit';\n      }\n    } else throw new Error('attack out of bounds');\n  };\n\n  //fn to return boolean based on all ships' sunk states.\n  //The some() CB checks if any ship is floating, answering: 'are all ships sunk?'.\n  //If floating ship found, some() immediately returns true. The result is then\n  //inversed before returning from allShipsSunk()\n  const allShipsSunk = ()=> ![...shipsMap.values()].some( (ship)=> !ship.isSunk() );\n  /* old checking code, clear and fine but long.\n  let res = true; let done;\n  shipsMap.forEach( (val)=> {\n    if ( done ) return;\n    //if any ship is not sunk, return false\n    if ( !val.isSunk() ) { res = false; done = true; } } );\n  return res;\n  */\n\n  return {\n    getPlayGrid: ()=> playGrid,\n    placeShip,\n    receiveAttack,\n    getShipsMap: ()=> shipsMap,\n    allShipsSunk,\n    placeShipsRandomly\n  };\n};\n\n//object composition fn. pass in computer's gameboard as state for structure, return\n//an object with computer methods for spreading into player object. computer methods\n//(like getNextURDLCellCoords) will use the passed in opponent's board.\nconst isComputer = (gameboard)=> {\n  //make linked list with nodes of '0,0' to '9,9' string values representing attack\n  //coordinates. A playGrid 2D array is used for structure.\n  const coordsToTry = makeLinkedList();\n  gameboard.getPlayGrid().forEach( (rowArr, row)=> {\n    rowArr.forEach( (data, col)=> coordsToTry.append( `${row},${col}` ) );\n  } );\n  //vars to compare last 2 coordinates and calculate inline attacks\n  let lastHitCoords;\n  let secondLastHitCoords;\n  let hitOrigin;\n\n  //fn to get the next valid URDL (up,right,down,left) cell to attack if found.\n  //Returns 2 elem array of: row/col coordinates and attack's hit/miss\n  const getNextURDLCellCoords = (playerPlayGrid)=> {\n    const [lastHitRow, lastHitCol] = lastHitCoords;\n    //need to loop over 2 arrays of 4 row/col move offsets, ordered cw from top\n    const rowOffsets = [-1, 0, 1, 0];\n    const colOffsets = [0, 1, 0, -1];\n    //4 operation loop to find next adjacent cell to attack\n    for ( let i = 0; i < 4; i++ ) {\n      const newRow = lastHitRow + rowOffsets[i];\n      const newCol = lastHitCol + colOffsets[i];\n      //filter to in bounds cells\n      if (newRow < 10 && newRow > -1 && newCol < 10 && newCol > -1) {\n        //filter to cells with null or a ship name\n        switch ( playerPlayGrid[newRow][newCol] ) {\n          case null:\n            //remove coord from coordsToTry linked list\n            coordsToTry.removeAt( coordsToTry.findIndex(`${newRow},${newCol}`) );\n            return [[newRow, newCol], 'miss'];\n          case 'Patrol Boat':\n          case 'Destroyer':\n          case 'Submarine':\n          case 'Battleship':\n          case 'Carrier':\n            //remove coord from coordsToTry linked list\n            coordsToTry.removeAt( coordsToTry.findIndex(`${newRow},${newCol}`) );\n            return [[newRow, newCol], 'hit'];\n          default:\n            // lg(`no null or ship name found at row: ${newRow} col: ${newCol\n            // }. for loop iteration index: ${i}`);\n        }\n      }\n    }\n    //no valid URDL cell if no return from loop. return null so getNextAttackCoords\n    //picks a random cell\n    return [[null, null], null];\n  };\n\n  //fn to get computer's next attack. Accesses opponent gameboard arr for cell data\n  //works ok with spaced apart ships, but if ships touch, or board too crowded, degrades\n  const getNextAttackCoords = (playerPlayGrid)=> {\n    //if secondLastHitCoords holds a value from two previous URDL (up,right,down,left)\n    //adjacent hits, begin linear attacks\n    if (secondLastHitCoords) {\n      const [lastRow, lastCol] = lastHitCoords;\n      const [secLastRow, secLastCol] = secondLastHitCoords;\n      //when last hits are horizontally aligned\n      if ( lastRow === secLastRow ) {\n        //check to attack left when cell is a ship's name or null\n        if ( lastCol > 0 && playerPlayGrid[lastRow][lastCol - 1] !== 'hit'\n          && playerPlayGrid[lastRow][lastCol - 1] !== 'miss' ) {\n          //update vars if leftwards inline attack will hit a ship\n          if ( playerPlayGrid[lastRow][lastCol - 1] !== null ) {\n            secondLastHitCoords = lastHitCoords;\n            lastHitCoords = [lastRow, lastCol - 1];\n          }\n          //switch last hit vars to attack rightwards on next turn since this attack misses\n          if ( playerPlayGrid[lastRow][lastCol - 1] === null ) {\n            //set lastHitCoords to hitOrigin coords, allowing to start from them next turn\n            lastHitCoords = hitOrigin;\n            //assign secondLastHitCoords to a same alignment hit adjacent to hitOrigin coords\n            secondLastHitCoords = [hitOrigin[0], hitOrigin[1] - 1];\n          }\n          //return this turn's leftward attack\n          coordsToTry.removeAt( coordsToTry.findIndex(`${lastRow},${lastCol - 1}`) );\n          return [lastRow, lastCol - 1];\n        }\n        //check to attack right when cell is a ship's name or null\n        if ( lastCol < 9 && playerPlayGrid[lastRow][lastCol + 1] !== 'hit'\n          && playerPlayGrid[lastRow][lastCol + 1] !== 'miss' ) {\n          //update vars if rightwards inline attack will hit a ship\n          if ( playerPlayGrid[lastRow][lastCol + 1] !== null ) {\n            secondLastHitCoords = lastHitCoords;\n            lastHitCoords = [lastRow, lastCol + 1];\n          }\n          //switch last hit vars to attack lefttwards on next turn since this attack misses\n          if ( playerPlayGrid[lastRow][lastCol + 1] === null ) {\n            //set lastHitCoords to hitOrigin coords, allowing to start from them next turn\n            lastHitCoords = hitOrigin;\n            //assign secondLastHitCoords to a same alignment hit adjacent to hitOrigin coords\n            secondLastHitCoords = [hitOrigin[0], hitOrigin[1] + 1];\n          }\n          //return this turn's rightward attack\n          coordsToTry.removeAt( coordsToTry.findIndex(`${lastRow},${lastCol + 1}`) );\n          return [lastRow, lastCol + 1];\n        }\n      //when last hits are vertically aligned\n      } else if (lastCol === secLastCol) {\n        //check to attack up when cell is a ship's name or null\n        if ( lastRow > 0 && playerPlayGrid[lastRow - 1][lastCol] !== 'hit'\n          && playerPlayGrid[lastRow - 1][lastCol] !== 'miss' ) {\n          //update vars if upwards inline attack will hit a ship\n          if ( playerPlayGrid[lastRow - 1][lastCol] !== null ) {\n            secondLastHitCoords = lastHitCoords;\n            lastHitCoords = [lastRow - 1, lastCol];\n          }\n          //switch last hit vars to attack downwards on next turn since this attack misses\n          if ( playerPlayGrid[lastRow - 1][lastCol] === null ) {\n            //set lastHitCoords to hitOrigin coords, allowing to start from them next turn\n            lastHitCoords = hitOrigin;\n            //assign secondLastHitCoords to a same alignment hit adjacent to hitOrigin coords\n            secondLastHitCoords = [hitOrigin[0] - 1, hitOrigin[1]];\n          }\n          //return this turn's upward attack\n          coordsToTry.removeAt( coordsToTry.findIndex(`${lastRow - 1},${lastCol}`) );\n          return [lastRow - 1, lastCol];\n        }\n        //check to attack down when cell is a ship's name or null\n        if ( lastRow < 9 && playerPlayGrid[lastRow + 1][lastCol] !== 'hit'\n          && playerPlayGrid[lastRow + 1][lastCol] !== 'miss' ) {\n          //update vars if downwards inline attack will hit a ship\n          if ( playerPlayGrid[lastRow + 1][lastCol] !== null ) {\n            secondLastHitCoords = lastHitCoords;\n            lastHitCoords = [lastRow + 1, lastCol];\n          }\n          //switch last hit vars to attack upwards on next turn since this attack misses\n          if ( playerPlayGrid[lastRow + 1][lastCol] === null ) {\n            //set lastHitCoords to hitOrigin coords, allowing to start from them next turn\n            lastHitCoords = hitOrigin;\n            //assign secondLastHitCoords to a same alignment hit adjacent to hitOrigin coords\n            secondLastHitCoords = [hitOrigin[0] + 1, hitOrigin[1]];\n          }\n          //return this turn's downward attack\n          coordsToTry.removeAt( coordsToTry.findIndex(`${lastRow + 1},${lastCol}`) );\n          return [lastRow + 1, lastCol];\n        }\n      }\n      //this point is reached when an attack could not be made at any end, for example\n      //when ship is at edge or between missed shots. set up next attack as random by\n      //clearing last two hit references.\n      [lastHitCoords, secondLastHitCoords] = [null, null];\n    }\n\n    //if lastHitCoords holds a value from a previous turn that hit, try attacking\n    //an URDL sibling cell to find an adjacent hit. this provides direction context.\n    if (lastHitCoords) {\n      const [nextAtkCoords, hitOrMiss] = getNextURDLCellCoords(playerPlayGrid);\n      //return attacks that hit for linear attacking next turn. return missed attacks as is\n      switch (hitOrMiss) {\n        case 'hit':\n          // Save coordinates for linear attacks next turn\n          secondLastHitCoords = lastHitCoords;\n          lastHitCoords = nextAtkCoords;\n          return nextAtkCoords;\n        case 'miss':\n          return nextAtkCoords;\n      }\n    //if no hit or miss, let fn continue to return a random cell\n    }\n\n    //get random attack coordinate array with a random index within the linked list size. Use\n    //linked list removeAt() to get the coordinate value and prevent re-attacking the cell.\n    const atkCoords = coordsToTry.removeAt( Math.floor( Math.random() * coordsToTry.getSize() ) )\n      .split(',').map(Number);\n    //do something according to data in cell\n    switch ( playerPlayGrid[atkCoords[0]][atkCoords[1]] ) {\n      //for missed attack coords:\n      case null:\n        return atkCoords;\n      //for hit attack coords:\n      case 'Patrol Boat':\n      case 'Destroyer':\n      case 'Submarine':\n      case 'Battleship':\n      case 'Carrier':\n        //if atkCoords will hit, save them to start checking URDL cells for an\n        //adjacent hit from next turn\n        lastHitCoords = atkCoords;\n        //set hitOrigin to atkCoords before returning to UI logic\n        hitOrigin = atkCoords;\n        return atkCoords;\n    }\n  };\n\n  return {\n    getNextAttackCoords\n  };\n};\n\n//fn to make player objects. player types (strings) are 'human' or 'computer' and have\n//their own gameboard\nexport const makePlayer = (type = 'human')=> {\n  const gameboard = makeGameboard();\n\n  return {\n    getGameboard: ()=> gameboard,\n    getType: ()=> type,\n    ...type === 'computer' ? isComputer(gameboard) : {} //conditional composition\n  };\n};\n","/* Next task:\n\n-turn this repo into new boilerplate\n*/\n\n// JS/CSS imports\nimport './styles.css';\n// import './assets/book-remove.svg'; //asset files example\n//include file extension For Node.js when importing local modules:\nimport { logToConsole as lg, log2DStringArray as lg2sa } from './logger.js';\nimport { makePlayer } from './main.js';\n\n//jest testing for this file is in index.test.js and done with ES Module exports\n\n//Main Project wrapped in initializer function to not have it's top level code execute when jest\n//imports this file.\nconst initProject = ()=> {\n  //Game flow starts here. sets up player/board states , UI, listeners, etc.\n  const passDeviceDiv = document.querySelector('#passDeviceDiv');\n  const continueBtn = document.querySelector('#continueBtn');\n  const boardsAndLabelsDiv = document.querySelector('#boardsAndLabelsDiv');\n  const receivingBoardDiv = document.querySelector('.receivingBoardDiv');\n  const attackingBoardDiv = document.querySelector('.attackingBoardDiv');\n  const msgDiv = document.querySelector('#msgDiv'); //feedback message div\n  const startBtn = document.querySelector('#startBtn');\n  const restartBtn = document.querySelector('#restartBtn');\n  const clearableBtnsDiv = document.querySelector('.clearable'); //for ship direction button\n  const shipOverlayDiv = document.querySelector('.shipOverlayDiv');\n  const shipNamesToPlace = ['Patrol Boat', 'Destroyer', 'Submarine', 'Battleship', 'Carrier'];\n  const shipLengths = [2, 3, 3, 4, 5];\n  let lastHoveredCell; //store last cell hovered over\n  let shipIndex;\n  let shipDirection; //for ship placement\n  let shipDirectionBtn;\n  let gameType; //assign '1P'/'2P' when button clicked\n  let player1; //player objects with gameboards\n  let player2;\n  let currentPlayer; //turn reference vars\n  let opponent;\n  let computerAttacking = false; //boolean to hold off premature attacks against computer\n  let debounceTimerIdentifier; //store timeout identifier from the setTimeout in sendAttack\n  let player1ShipsPlaced = false; //to track player1 ship placement completion\n  let player1PlacingShips = false; //working on this\n  let player2ShipsPlaced = false; //to track player2 ship placement completion\n  let placeShipsRandomlyBtn; //save access to block it\n\n  //fn to render a player's 2 boards; call after data changes in players' playGrid arrays\n  const renderBoards = ()=> {\n    // lg('rendering boards. current player has playGrid arr:'); //debug\n    // lg( currentPlayer.getGameboard().getPlayGrid() ); //debug\n    [[currentPlayer, receivingBoardDiv], [opponent, attackingBoardDiv]]\n      .forEach( ([player, boardDiv])=> {\n        boardDiv.textContent = ''; //delete old cells\n        //build cells from playGrid array, append to board div\n        player.getGameboard().getPlayGrid().forEach( (rowArr, row)=> {\n          // lg(rowArr.join()); //debug\n          rowArr.forEach( (data, col)=> {\n            const cellDiv = document.createElement('div');\n            cellDiv.classList.add('cellDiv');\n            cellDiv.dataset.cellData = data;\n            cellDiv.dataset.row = row;\n            cellDiv.dataset.col = col;\n            boardDiv.append( cellDiv );\n          } );\n        } );\n      } );\n  };\n\n  //listener cb fn to handle sending an attack to opponent board and get computer's attacks\n  const sendAttack = (e)=> {\n    e.stopPropagation();\n    //return early if debounceTimerIdentifier holds a timer identifier from setTimeout\n    if (debounceTimerIdentifier) return;\n    //return early if computer attack not done\n    if (computerAttacking) return;\n    //set computerAttacking to true\n    if (gameType === '1P') computerAttacking = true;\n    //using conditional since div border clicks trigger listener cb\n    if (e.target.className === 'cellDiv') {\n      //call receiveAttack fn on opponent's gameboard, save result for display logic\n      const attackRes = opponent.getGameboard()\n        .receiveAttack( [+e.target.dataset.row, +e.target.dataset.col] );\n      //only re-render when attackRes is a useful string like hit or miss\n      if (attackRes) {\n        //log opponent playGrid arr after sending attack. comment for prod...\n        // lg(`${opponent === player1 ? 'P1' : 'P2'}'s board:`);\n        // lg2sa( opponent.getGameboard().getPlayGrid() );\n        renderBoards();//show attack result\n        //handle game over when all opponent's ships sunk\n        if (opponent.getGameboard().allShipsSunk()) {\n          //disable attackingBoardDiv, inform player\n          attackingBoardDiv.removeEventListener('click', sendAttack);\n          msgDiv.textContent = `Player ${ currentPlayer === player1 ? '1' : '2' } wins!`;\n          computerAttacking = false; //disable to allow player's next attack\n        //handle next player's turn: show attack result message, wait a little to hide\n        //boards and show passDeviceDiv. After that, we wait for the device pass, and for\n        //next player to press the continue button with the continueToNextPlayer cb fn.\n        } else {\n          msgDiv.textContent = attackRes === 'hit' ? 'Attack hit!' : 'Attack missed!';\n          //show current player's attack / info message for a delayed period, then either hide\n          //boards and show passDeviceDiv, or proceed with computer's attack\n          debounceTimerIdentifier = setTimeout( () => {\n            if (gameType === '2P') {\n              boardsAndLabelsDiv.style.display = 'none';\n              passDeviceDiv.style.display = 'block';\n            } else { // gameType === '1P'\n              getAndHandleComputerAttack();\n            }\n            debounceTimerIdentifier = null; //clear it after either path\n          }, 1000); //extend this delay to 1000 for prod...\n        }\n      //handle click on cellDiv that did not result in hit / miss (previously attacked cell)\n      } else {\n        computerAttacking = false; //disable to allow player's next attack\n      }\n    //handle click not on a cellDiv, like border\n    } else {\n      computerAttacking = false; //disable to allow player's next attack\n    }\n\n  };\n\n  //fn to get and handle computer's attacks. called by setTimeout after attacking computer\n  const getAndHandleComputerAttack = ()=> {\n    //get computer's attack coordinates, need to pass in player's board for computer decision\n    const compAtkRes = currentPlayer.getGameboard().receiveAttack(\n      opponent.getNextAttackCoords( currentPlayer.getGameboard().getPlayGrid() )\n    );\n    renderBoards();//show computer's attack\n    msgDiv.textContent = compAtkRes === 'hit'\n      ? 'Computer\\'s attack hit! Make your turn..'\n      : 'Computer\\'s Attack missed! Make your turn..';\n    //check if computer won\n    if ( currentPlayer.getGameboard().allShipsSunk() ) {\n      //disable attackingBoardDiv, inform player\n      attackingBoardDiv.removeEventListener('click', sendAttack);\n      msgDiv.textContent = 'Computer wins!';\n    }\n    computerAttacking = false; //disable to allow player's next attack\n  };\n\n  //cb fn to go to next player when continueBtn in passDeviceDiv clicked. Also\n  //handles hiding between ship placements.\n  const continueToNextPlayer = (e)=> {\n    e.stopPropagation();\n    [opponent, currentPlayer] = [currentPlayer, opponent]; //swap players\n    // lg(currentPlayer === player1 ? 'switched to player1' : 'switched to player2'); //debug\n    passDeviceDiv.style.display = 'none'; //hide\n    //listen for P2 ships placement\n    if (!player2ShipsPlaced && player1ShipsPlaced && !player1PlacingShips) {\n      placeShipsAndSetup();\n      // lg(4);\n    //show next player's boards and info msg on click\n    } else {\n      renderBoards(); //remake cells\n      msgDiv.textContent = `Player ${ currentPlayer === player1 ? '1' : '2' }'s attack turn..`;\n      // lg(5);\n    }\n    boardsAndLabelsDiv.style.display = 'flex'; //show boards\n  };\n\n  //fn to set available buttons, attach listeners, start listening for attacks\n  //need to make sure works for 2P...\n  const setBtnsListenersAndStart = ()=> {\n    restartBtn.removeAttribute('disabled'); //allow restarting, same gameType\n    startBtn.setAttribute('disabled', ''); //block\n    placeShipsRandomlyBtn.setAttribute('disabled', ''); //block\n    //set listener to handle attack cell clicks\n    attackingBoardDiv.addEventListener('click', sendAttack);\n    msgDiv.textContent = `Player ${ currentPlayer === player1 ? 1 : 2}'s attack turn..`; //for UI\n  };\n\n  //cb fn to change ship placement direction. propagation ok\n  const changeDirection = ()=> shipDirection = shipDirection === 'right' ? 'down' : 'right';\n\n  //cb fn to place 5 ships in current player's gameboard\n  const placeShipFromCell = (e)=> {\n    e.stopPropagation();\n    //when a ship must be placed and cursor is still over cell\n    if (shipIndex < 5 && lastHoveredCell) {\n      //try placing a ship; placeShip throws errors to catch\n      try {\n        currentPlayer.getGameboard().placeShip(\n          [+lastHoveredCell.dataset.row, +lastHoveredCell.dataset.col],\n          shipDirection,\n          shipNamesToPlace[shipIndex]\n        );\n        renderBoards(); //show successfully placed ship\n        shipIndex++; //increment index for correct ship on next placement\n        //set msg for next ship placement if ship index valid\n        if (shipIndex < 5) {\n          msgDiv.textContent = `Place your ${shipNamesToPlace[shipIndex]}`;\n        //confirm placements via startBtn when all ships placed (shipIndex === 5)\n        } else {\n          if (gameType === '1P') { //for 1P game\n            //prep for game start, but still allow random placements\n            shipPlacementCleanup(true); //remove listeners\n            // lg(6);\n          } else { //for 2P game\n            shipOverlayDiv.style.display = 'none'; //hide\n            // lg(7);\n          }\n          startBtn.removeAttribute('disabled'); //enable for confirmation\n          msgDiv.textContent = 'Click start to confirm placements';\n        }\n      //catch and ship placement errors, inform user to try again\n      } catch (err) {\n        msgDiv.textContent = 'invalid ship placement, try again';\n        // lg(err.message);\n      }\n    }\n  };\n\n  //listener cb fn to show shipOverlayDiv for current ship being placed. saves hovered cell\n  const showShipOverlay = (e)=> {\n    e.stopPropagation();\n    lastHoveredCell = e.target.classList.contains('cellDiv') ? e.target : null;\n    if (lastHoveredCell) { // .cellDivs only\n      //align ship overlay to lastHoveredCell\n      shipOverlayDiv.style.top = `${ lastHoveredCell.getBoundingClientRect().top\n        + window.scrollY }px`;\n      shipOverlayDiv.style.left = `${ lastHoveredCell.getBoundingClientRect().left\n        + window.scrollX }px`;\n      //set overlay dimensions from ship length\n      if (shipDirection === 'right') { //place horizontal ship\n        shipOverlayDiv.style.width = `${ lastHoveredCell\n          .getBoundingClientRect().width * shipLengths[shipIndex] }px`;\n        shipOverlayDiv.style.height = `${lastHoveredCell.getBoundingClientRect().height}px`;\n      } else if (shipDirection === 'down') { //place vertical ship\n        shipOverlayDiv.style.width = `${lastHoveredCell.getBoundingClientRect().width}px`;\n        shipOverlayDiv.style.height = `${ lastHoveredCell\n          .getBoundingClientRect().height * shipLengths[shipIndex] }px`;\n      }\n    }\n  };\n\n  //fn to clean up after ship placements. removes listeners\n  const shipPlacementCleanup = (allowRandomPlacements = false)=> {\n    receivingBoardDiv.removeEventListener('click', placeShipFromCell);\n    receivingBoardDiv.removeEventListener('mouseover', showShipOverlay);\n    shipOverlayDiv.style.display = 'none'; // hide shipOverlayDiv\n    shipDirectionBtn.removeEventListener('click', changeDirection);\n    shipDirectionBtn.setAttribute('disabled', ''); //disable direction btn\n    //disable random placements btn conditionally\n    if (!allowRandomPlacements) placeShipsRandomlyBtn.setAttribute('disabled', '');\n  };\n\n  const placeRandomly = ()=> {\n    shipIndex = 5; //block manual ship placement\n    currentPlayer.getGameboard().placeShipsRandomly(); //place ships randomly\n    renderBoards(); //show ships\n    //ask for placement confirmation via startBtn, but still allow random placements\n    startBtn.removeAttribute('disabled');\n    shipPlacementCleanup(true); //stop manual placement listeners\n    msgDiv.textContent = 'Click start to confirm placements.';\n  };\n\n  //fn to listen for 5 ship placements in 2 ways: click-cells-to-place (simpler than\n  //drag and drop), or click random placement. Placements confirmed via start button\n  const placeShipsAndSetup = ()=> {\n    shipIndex = 0;\n    shipDirection = 'right'; //for ship placement\n\n    // lg(`now listening for ${ currentPlayer === player1 ? 'P1' : 'P2'} placements`); //debug\n\n    //add ship direction change, and random placement btns in cleared .clearable div\n    clearableBtnsDiv.textContent = ''; //clear old btns\n    shipDirectionBtn = document.createElement('button');\n    shipDirectionBtn.textContent = 'change ship direction';\n    shipDirectionBtn.addEventListener('click', changeDirection);\n    placeShipsRandomlyBtn = document.createElement('button');\n    placeShipsRandomlyBtn.textContent = 'place ships randomly';\n    placeShipsRandomlyBtn.addEventListener('click', placeRandomly);\n    clearableBtnsDiv.append( shipDirectionBtn, placeShipsRandomlyBtn ); //add to UI\n    //enable preview overlay of ship to place on hovered .cellDiv element\n    receivingBoardDiv.addEventListener('mouseover', showShipOverlay);\n    //start listeners for player(s) ship placement\n    receivingBoardDiv.addEventListener('click', placeShipFromCell);\n    if (gameType === '2P') continueBtn.addEventListener('click', continueToNextPlayer );\n    //show boards, shipOverlayDiv, placement message\n    renderBoards(); //show current player's boards\n    shipOverlayDiv.style.display = 'block';\n    msgDiv.textContent = `Player ${ currentPlayer === player1 ? '1' : '2'}, click grid\n    to place Patrol Boat, or the place ships randomly button`;\n  };\n\n  //listener for buttons in setupControlsWrap\n  //begin game from btn of chosen game type\n  document.querySelector('.setupControlsWrap').addEventListener('click', (e)=> {\n    e.stopPropagation();\n\n    switch (e.target.id) {\n      //when 2P (battle other player) game type chosen...\n      case 'playOtherPlayerBtn':\n        gameType = '2P';\n        //make and assign 2 players (both are default type human)\n        player1 = makePlayer();\n        player2 = makePlayer();\n        [currentPlayer, opponent] = [player1, player2];\n        //inform starting player, enable startBtn\n        msgDiv.textContent = 'Player 1, please turn device away and click start';\n        startBtn.removeAttribute('disabled'); //\n        break;\n      //when 1P (battle computer) game type chosen\n      case 'playComputerBtn':\n        document.querySelectorAll('.hideMe').forEach((c)=>c.className = ''); //show titles\n        gameType = '1P'; //gameType for computer choice logic\n        //make one human, one computer player\n        player1 = makePlayer(); //type 'human' is default\n        player2 = makePlayer('computer');\n        [currentPlayer, opponent] = [player1, player2];\n        //start ship placement listener, it will take over control flow and\n        //setup/start game when all ships placed\n        placeShipsAndSetup();\n        break;\n      //For 1P/2P games, startBtn control flow from game state\n      case 'startBtn':\n        //for 1P games:\n        if (gameType === '1P') {\n          player2.getGameboard().placeShipsRandomly();//populate computer's board randomly\n          setBtnsListenersAndStart(); //setup / start game\n        //for 2P games:\n        //listen for P1 ship placements\n        } else if (!player1ShipsPlaced && !player1PlacingShips) {\n          document.querySelectorAll('.hideMe').forEach((c)=>c.className = ''); //show titles\n          player1PlacingShips = true;//set placement state\n          startBtn.setAttribute('disabled', ''); //disable btn\n          placeShipsAndSetup(); //begin listening\n          // lg(1);\n        //accept P1 ship placements, hide boards, show passDeviceDiv. Once P2 has device and\n        //clicks continueBtn, continueToNextPlayer handles listening for P2 ship placements\n        } else if (player1PlacingShips && !player1ShipsPlaced) {\n          player1PlacingShips = false; //set placement state\n          player1ShipsPlaced = true; //set placement state\n          startBtn.setAttribute('disabled', ''); //disable btn\n          placeShipsRandomlyBtn.setAttribute('disabled', ''); //disable btn\n          boardsAndLabelsDiv.style.display = 'none'; //hide boards\n          passDeviceDiv.style.display = 'block'; //show passing screen with continueBtn\n          msgDiv.textContent = ''; //clear prev player msg\n          shipDirectionBtn.setAttribute('disabled', ''); //disable\n          // lg(2);\n        //accept P2 ship placements, start game. no need to pass device...\n        } else if (player1ShipsPlaced && !player1PlacingShips) {\n          player2ShipsPlaced = true; //set placement state\n          shipPlacementCleanup(); //stop placement listeners\n          setBtnsListenersAndStart(); //setup / start game\n          // lg(3);\n        }\n        break;\n      //handle boards/state reset, game restart\n      case 'restartBtn':\n        //path for restarting computer battle\n        if (gameType === '1P') {\n          //remake boards, reset player order\n          player1 = makePlayer();\n          player2 = makePlayer('computer');\n          [currentPlayer, opponent] = [player1, player2];\n          attackingBoardDiv.removeEventListener('click', sendAttack); //disable until ships placed\n          restartBtn.setAttribute('disabled', ''); //disable until game starts\n          //start ship placement listener, it will take over control flow and\n          //setup/start game when all ships placed\n          placeShipsAndSetup();\n        //path for restarting 2 player battle...\n        } else {\n          // lg('restarting 2p game..');//debug\n          // debugger\n          //restore boards if restart button pressed when passDeviceDiv active\n          boardsAndLabelsDiv.style.display = 'flex';\n          passDeviceDiv.style.display = 'none';\n          //reset boards by reassigning player1/2 to new player objects with null playGrid arrays\n          player1 = makePlayer();\n          player2 = makePlayer();\n          [currentPlayer, opponent] = [player1, player2];\n          attackingBoardDiv.removeEventListener('click', sendAttack); //disable until ships placed\n          restartBtn.setAttribute('disabled', ''); //disable until game starts\n          //reset some ship placement states\n          player1PlacingShips = true;\n          player1ShipsPlaced = false;\n          player2ShipsPlaced = false;\n          //start ship placement listener; it takes over control flow and does\n          //game setup/start when all ships placed\n          placeShipsAndSetup();\n        }\n        break;\n    }\n\n  });\n\n  // Remove the initProject event listener\n  document.removeEventListener('DOMContentLoaded', initProject);\n}; //end of wrapped project\n// Start project code when DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', initProject);\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","exports","cssWithMappingToString","list","toString","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","stylesInDOM","getIndexByIdentifier","identifier","result","modulesToDom","options","idCountMap","identifiers","base","count","indexByIdentifier","obj","css","sourceMap","references","updater","addElementStyle","byIndex","splice","api","domAPI","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","memo","insert","style","target","styleTarget","document","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","appendChild","element","createElement","setAttributes","attributes","styleElement","nonce","setAttribute","insertStyleElement","styleTagTransform","apply","parentNode","removeChild","removeStyleElement","styleSheet","cssText","firstChild","createTextNode","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","call","nc","locals","logToConsole","console","log","makeNode","value","next","tail","currentSize","prepend","newHead","getSize","at","skipValidation","currentNode","currentIndex","append","getHead","getTail","pop","findIndex","insertAt","insertIndex","previousNode","nextNode","removeAt","removalIndex","returnVal","isComputer","gameboard","coordsToTry","lastHitCoords","secondLastHitCoords","hitOrigin","getPlayGrid","forEach","rowArr","row","col","getNextAttackCoords","playerPlayGrid","lastRow","lastCol","secLastRow","secLastCol","nextAtkCoords","hitOrMiss","lastHitRow","lastHitCol","rowOffsets","colOffsets","newRow","newCol","getNextURDLCellCoords","atkCoords","Math","floor","random","split","Number","makePlayer","type","playGrid","Array","fill","shipsMap","Map","placeShip","startCoords","direction","shipName","set","ship","hits","isSunk","getLength","getHits","hitShip","makeShip","markEnd","possibleMarkCoords","isValid","markCount","markCoords","_placeAndGetShip","receiveAttack","attackCoords","getShipsMap","allShipsSunk","values","some","placeShipsRandomly","shipsToPlace","shipSizes","markedCoords","Set","placeShips","shipIndex","aim","currentCoord","has","add","err","message","makeGameboard","getGameboard","getType","initProject","passDeviceDiv","continueBtn","boardsAndLabelsDiv","receivingBoardDiv","attackingBoardDiv","msgDiv","startBtn","restartBtn","clearableBtnsDiv","shipOverlayDiv","shipNamesToPlace","shipLengths","lastHoveredCell","shipDirection","shipDirectionBtn","gameType","player1","player2","currentPlayer","opponent","debounceTimerIdentifier","placeShipsRandomlyBtn","computerAttacking","player1ShipsPlaced","player1PlacingShips","player2ShipsPlaced","renderBoards","player","boardDiv","textContent","cellDiv","classList","dataset","cellData","sendAttack","stopPropagation","className","attackRes","removeEventListener","setTimeout","display","getAndHandleComputerAttack","compAtkRes","continueToNextPlayer","placeShipsAndSetup","setBtnsListenersAndStart","removeAttribute","addEventListener","changeDirection","placeShipFromCell","shipPlacementCleanup","showShipOverlay","contains","top","getBoundingClientRect","scrollY","left","scrollX","width","height","allowRandomPlacements","placeRandomly","querySelectorAll","c"],"sourceRoot":""}